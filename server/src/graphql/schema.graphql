scalar DateTime

type Person {
  id: ID!
  name: String!
  image: String
  image160: String
  image30: String
  image70: String
  initials: String!
  jobTitle: String
  profileUrl: String
}

type RealtimeFeedbackRequest {
  id: ID!

  "Person you are supposed to rate"
  subjectId: ID!

  subject: Person!

  "You were doing this action when we prompted you to give feedback"
  action: String!

  "The full text of the question we want to ask to get a rating based off of"
  question: String!

  "The key for the value the person is being rated on"
  value: String!

  "How many times you've snoozed this request"
  snoozeCount: Int!
}

type Query {
  currentRequest: RealtimeFeedbackRequest!
}

input RateSomeoneInput {
  requestId: ID!
  rating: Float!
  comment: String
}

type Mutation {
  rateSomeone(input: RateSomeoneInput!): String
  snoozeFeedback(requestId: ID!): String
}
